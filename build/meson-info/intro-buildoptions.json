[{"name": "auto_features", "value": "auto", "section": "core", "machine": "any", "choices": ["enabled", "disabled", "auto"], "type": "combo", "description": "Override value of all 'auto' features"}, {"name": "backend", "value": "ninja", "section": "core", "machine": "any", "choices": ["ninja", "vs", "vs2010", "vs2015", "vs2017", "vs2019", "xcode"], "type": "combo", "description": "Backend to use"}, {"name": "buildtype", "value": "release", "section": "core", "machine": "any", "choices": ["plain", "debug", "debugoptimized", "release", "minsize", "custom"], "type": "combo", "description": "Build type to use"}, {"name": "debug", "value": false, "section": "core", "machine": "any", "type": "boolean", "description": "Debug"}, {"name": "default_library", "value": "static", "section": "core", "machine": "any", "choices": ["shared", "static", "both"], "type": "combo", "description": "Default library type"}, {"name": "install_umask", "value": 18, "section": "core", "machine": "any", "type": "integer", "description": "Default umask to apply on permissions of installed files"}, {"name": "layout", "value": "mirror", "section": "core", "machine": "any", "choices": ["mirror", "flat"], "type": "combo", "description": "Build directory layout"}, {"name": "optimization", "value": "3", "section": "core", "machine": "any", "choices": ["0", "g", "1", "2", "3", "s"], "type": "combo", "description": "Optimization level"}, {"name": "strip", "value": false, "section": "core", "machine": "any", "type": "boolean", "description": "Strip targets on install"}, {"name": "unity", "value": "off", "section": "core", "machine": "any", "choices": ["on", "off", "subprojects"], "type": "combo", "description": "Unity build"}, {"name": "warning_level", "value": "2", "section": "core", "machine": "any", "choices": ["0", "1", "2", "3"], "type": "combo", "description": "Compiler warning level to use"}, {"name": "werror", "value": false, "section": "core", "machine": "any", "type": "boolean", "description": "Treat warnings as errors"}, {"name": "wrap_mode", "value": "default", "section": "core", "machine": "any", "choices": ["default", "nofallback", "nodownload", "forcefallback"], "type": "combo", "description": "Wrap mode"}, {"name": "cmake_prefix_path", "value": [], "section": "core", "machine": "host", "type": "array", "description": "T.List of additional prefixes for cmake to search"}, {"name": "pkg_config_path", "value": [], "section": "core", "machine": "host", "type": "array", "description": "T.List of additional paths for pkg-config to search"}, {"name": "build.cmake_prefix_path", "value": [], "section": "core", "machine": "build", "type": "array", "description": "T.List of additional prefixes for cmake to search"}, {"name": "build.pkg_config_path", "value": [], "section": "core", "machine": "build", "type": "array", "description": "T.List of additional paths for pkg-config to search"}, {"name": "backend_max_links", "value": 0, "section": "backend", "machine": "any", "type": "integer", "description": "Maximum number of linker processes to run or 0 for no limit"}, {"name": "b_asneeded", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Use -Wl,--as-needed when linking"}, {"name": "b_colorout", "value": "always", "section": "base", "machine": "any", "choices": ["auto", "always", "never"], "type": "combo", "description": "Use colored output"}, {"name": "b_coverage", "value": false, "section": "base", "machine": "any", "type": "boolean", "description": "Enable coverage tracking."}, {"name": "b_lto", "value": false, "section": "base", "machine": "any", "type": "boolean", "description": "Use link time optimization"}, {"name": "b_lundef", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Use -Wl,--no-undefined when linking"}, {"name": "b_ndebug", "value": "false", "section": "base", "machine": "any", "choices": ["true", "false", "if-release"], "type": "combo", "description": "Disable asserts"}, {"name": "b_pch", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Use precompiled headers"}, {"name": "b_pgo", "value": "off", "section": "base", "machine": "any", "choices": ["off", "generate", "use"], "type": "combo", "description": "Use profile guided optimization"}, {"name": "b_pie", "value": false, "section": "base", "machine": "any", "type": "boolean", "description": "Build executables as position independent"}, {"name": "b_sanitize", "value": "none", "section": "base", "machine": "any", "choices": ["none", "address", "thread", "undefined", "memory", "address,undefined"], "type": "combo", "description": "Code sanitizer to use"}, {"name": "b_staticpic", "value": true, "section": "base", "machine": "any", "type": "boolean", "description": "Build static libraries as position independent"}, {"name": "c_args", "value": [], "section": "compiler", "machine": "host", "type": "array", "description": "Extra arguments passed to the c compiler"}, {"name": "c_link_args", "value": [], "section": "compiler", "machine": "host", "type": "array", "description": "Extra arguments passed to the c linker"}, {"name": "c_std", "value": "none", "section": "compiler", "machine": "host", "choices": ["none", "c89", "c99", "c11", "c17", "c18", "gnu89", "gnu99", "gnu11", "gnu17", "gnu18"], "type": "combo", "description": "C language standard to use"}, {"name": "build.c_args", "value": [], "section": "compiler", "machine": "build", "type": "array", "description": "Extra arguments passed to the c compiler"}, {"name": "build.c_link_args", "value": [], "section": "compiler", "machine": "build", "type": "array", "description": "Extra arguments passed to the c linker"}, {"name": "build.c_std", "value": "none", "section": "compiler", "machine": "build", "choices": ["none", "c89", "c99", "c11", "c17", "c18", "gnu89", "gnu99", "gnu11", "gnu17", "gnu18"], "type": "combo", "description": "C language standard to use"}, {"name": "bindir", "value": "bin", "section": "directory", "machine": "any", "type": "string", "description": "Executable directory"}, {"name": "datadir", "value": "share", "section": "directory", "machine": "any", "type": "string", "description": "Data file directory"}, {"name": "includedir", "value": "include", "section": "directory", "machine": "any", "type": "string", "description": "Header file directory"}, {"name": "infodir", "value": "share/info", "section": "directory", "machine": "any", "type": "string", "description": "Info page directory"}, {"name": "libdir", "value": "lib/x86_64-linux-gnu", "section": "directory", "machine": "any", "type": "string", "description": "Library directory"}, {"name": "libexecdir", "value": "libexec", "section": "directory", "machine": "any", "type": "string", "description": "Library executable directory"}, {"name": "localedir", "value": "share/locale", "section": "directory", "machine": "any", "type": "string", "description": "Locale data directory"}, {"name": "localstatedir", "value": "/var/local", "section": "directory", "machine": "any", "type": "string", "description": "Localstate data directory"}, {"name": "mandir", "value": "share/man", "section": "directory", "machine": "any", "type": "string", "description": "Manual page directory"}, {"name": "prefix", "value": "/usr/local", "section": "directory", "machine": "any", "type": "string", "description": "Installation prefix"}, {"name": "sbindir", "value": "sbin", "section": "directory", "machine": "any", "type": "string", "description": "System executable directory"}, {"name": "sharedstatedir", "value": "/var/local/lib", "section": "directory", "machine": "any", "type": "string", "description": "Architecture-independent data directory"}, {"name": "sysconfdir", "value": "etc", "section": "directory", "machine": "any", "type": "string", "description": "Sysconf data directory"}, {"name": "check_includes", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "build \"chkincs\" to verify each header file can compile alone"}, {"name": "cpu_instruction_set", "value": "auto", "section": "user", "machine": "any", "type": "string", "description": "Set the target machine ISA (instruction set architecture). Will be set according to the platform option by default."}, {"name": "developer_mode", "value": "auto", "section": "user", "machine": "any", "choices": ["enabled", "disabled", "auto"], "type": "combo", "description": "turn on additional build checks relevant for DPDK developers"}, {"name": "disable_drivers", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Comma-separated list of drivers to explicitly disable."}, {"name": "disable_libs", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Comma-separated list of libraries to explicitly disable. [NOTE: not all libs can be disabled]"}, {"name": "drivers_install_subdir", "value": "dpdk/pmds-<VERSION>", "section": "user", "machine": "any", "type": "string", "description": "Subdirectory of libdir where to install PMDs. Defaults to using a versioned subdirectory."}, {"name": "enable_docs", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "build documentation"}, {"name": "enable_driver_sdk", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "Install headers to build drivers."}, {"name": "enable_drivers", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Comma-separated list of drivers to build. If unspecified, build all drivers."}, {"name": "enable_kmods", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "build kernel modules"}, {"name": "enable_trace_fp", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "enable fast path trace points."}, {"name": "examples", "value": "all", "section": "user", "machine": "any", "type": "string", "description": "Comma-separated list of examples to build by default"}, {"name": "flexran_sdk", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Path to FlexRAN SDK optional Libraries for BBDEV device"}, {"name": "ibverbs_link", "value": "shared", "section": "user", "machine": "any", "choices": ["static", "shared", "dlopen"], "type": "combo", "description": "Linkage method (static/shared/dlopen) for Mellanox PMDs with ibverbs dependencies."}, {"name": "include_subdir_arch", "value": "", "section": "user", "machine": "any", "type": "string", "description": "subdirectory where to install arch-dependent headers"}, {"name": "kernel_dir", "value": "", "section": "user", "machine": "any", "type": "string", "description": "Path to the kernel for building kernel modules. Headers must be in $kernel_dir or $kernel_dir/build. Modules will be installed in /lib/modules."}, {"name": "machine", "value": "auto", "section": "user", "machine": "any", "type": "string", "description": "Alias of cpu_instruction_set."}, {"name": "max_ethports", "value": 32, "section": "user", "machine": "any", "type": "integer", "description": "maximum number of Ethernet devices"}, {"name": "max_lcores", "value": "default", "section": "user", "machine": "any", "type": "string", "description": "Set maximum number of cores/threads supported by EAL; \"default\" is different per-arch, \"detect\" detects the number of cores on the build machine."}, {"name": "max_numa_nodes", "value": "default", "section": "user", "machine": "any", "type": "string", "description": "Set the highest NUMA node supported by EAL; \"default\" is different per-arch, \"detect\" detects the highest NUMA node on the build machine."}, {"name": "mbuf_refcnt_atomic", "value": true, "section": "user", "machine": "any", "type": "boolean", "description": "Atomically access the mbuf refcnt."}, {"name": "platform", "value": "native", "section": "user", "machine": "any", "type": "string", "description": "Platform to build, either \"native\", \"generic\" or a SoC. Please refer to the Linux build guide for more information."}, {"name": "tests", "value": true, "section": "user", "machine": "any", "type": "boolean", "description": "build unit tests"}, {"name": "use_hpet", "value": false, "section": "user", "machine": "any", "type": "boolean", "description": "use HPET timer in EAL"}, {"name": "errorlogs", "value": true, "section": "test", "machine": "any", "type": "boolean", "description": "Whether to print the logs from failing tests"}, {"name": "stdsplit", "value": true, "section": "test", "machine": "any", "type": "boolean", "description": "Split stdout and stderr in test logs"}]